// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3482.robot;

import org.usfirst.frc3482.robot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc3482.robot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton spinAndShootButton;
    public JoystickButton armPositionBridgeButton;
    public JoystickButton lowerIntakeButton;
    public JoystickButton invertDirectionButton;
    public JoystickButton spinShooterButton;
    public JoystickButton armPositionPortButton;
    public JoystickButton shootButton;
    public JoystickButton forwardFeedButton; 
    public JoystickButton reverseFeedButton;
    public JoystickButton maintainIntakeButton;
    public JoystickButton topJointButton;
    public JoystickButton bridgeButton;
    public JoystickButton moveUpperJointButton;
    public JoystickButton moveLowerJointButton;
    public JoystickButton moveIntakeButton;
    
    
    public Joystick xboxController;
    public Joystick joystick;
    public Joystick arcadeButtons;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        xboxController = new Joystick(0);
        joystick = new Joystick(1);
        
        spinShooterButton = new JoystickButton(joystick, 2);
        spinShooterButton.whileHeld(new SpinShooter());
        
        moveUpperJointButton = new JoystickButton(joystick, 10);
        moveUpperJointButton.whileHeld(new MoveLowerJoint());
        moveLowerJointButton = new JoystickButton(joystick, 9);
        moveLowerJointButton.whileHeld(new MoveUpperJoint());
        moveIntakeButton = new JoystickButton(joystick, 6);
        moveIntakeButton.whileHeld(new MoveIntake());
        
        
        invertDirectionButton = new JoystickButton(xboxController, 5);
        invertDirectionButton.whileHeld(new InvertDirection());
        forwardFeedButton = new JoystickButton(joystick, 1);
        forwardFeedButton.whileHeld(new FeedShooter());
        reverseFeedButton = new JoystickButton(joystick, 3);
        reverseFeedButton.whileHeld(new FeedShooter(false));
        lowerIntakeButton = new JoystickButton(joystick, 7);
        lowerIntakeButton.toggleWhenPressed(new LowerIntake());
//        bridgeButton = new JoystickButton(xboxController, 8);
//        bridgeButton.toggleWhenPressed(new ArmPositionBridge());
//        armPositionBridgeButton = new JoystickButton(xboxController, 2);
//        armPositionBridgeButton.whenPressed(new ArmPositionBridge());
        //spinAndShootButton = new JoystickButton(xboxController, 1);
        //spinAndShootButton.whenPressed(new SpinAndShoot());
        topJointButton = new JoystickButton(joystick, 9);
        //topJointButton.whileHeld(new );
        
        // SmartDashboard Buttons
        SmartDashboard.putData("ArmPositionPort", new ArmPositionSallyPort());
        SmartDashboard.putData("ArmPositionBridge", new ArmPositionBridge());
        SmartDashboard.putData("InvertDirection", new InvertDirection());
        SmartDashboard.putData("LowerIntake", new LowerIntake());
        SmartDashboard.putData("SpinAndShoot", new SpinAndShoot());
        SmartDashboard.putData("Shoot", new Shoot());
        SmartDashboard.putData("SpinShooter", new SpinShooter());
        SmartDashboard.putData("Move", new Move());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive", new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getxboxController() {
        return xboxController;
    }
    public Joystick getJoystick() {
    	return joystick;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

