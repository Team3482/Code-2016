// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3482.robot;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc3482.robot.commands.*;
import org.usfirst.frc3482.robot.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    Command teleopCommand;
    
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Chassis chassis;
    public static Shooter shooter;
    public static Arm arm;
    public static Intake intake;
    public static Camera camera;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassis = new Chassis();
        shooter = new Shooter();
        arm = new Arm();
        intake = new Intake();
        camera = new Camera();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        chassis.invertMotors();
         teleopCommand = new Drive();
//         int absolutePosition = RobotMap.intake.getPulseWidthPosition() & 0xFFF; /* mask out the bottom12 bits, we don't care about the wrap arounds */
//         RobotMap.intake.setEncPosition(absolutePosition);
//         
//         /* choose the sensor and sensor direction */
//         RobotMap.intake.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
//         RobotMap.intake.reverseSensor(false);
//         //RobotMap.intake.configEncoderCodesPerRev(XXX), // if using FeedbackDevice.QuadEncoder
//         //RobotMap.intake.configPotentiometerTurns(XXX), // if using FeedbackDevice.AnalogEncoder or AnalogPot
//
//         /* set the peak and nominal outputs, 12V means full */
//         RobotMap.intake.configNominalOutputVoltage(+0f, -0f);
//         RobotMap.intake.configPeakOutputVoltage(+12f, -12f);
//         /* set the allowable closed-loop error,
//          * Closed-Loop output will be neutral within this range.
//          * See Table in Section 17.2.1 for native units per rotation. 
//          */
//         RobotMap.intake.setAllowableClosedLoopErr(0); /* always servo */
//         /* set closed loop gains in slot0 */
//         RobotMap.intake.setProfile(0);
//         RobotMap.intake.setF(0.0);
//         RobotMap.intake.setP(0.1);
//         RobotMap.intake.setI(0.0); 
//         RobotMap.intake.setD(0.0);    
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        //Robot.intake.runWheels();
        //Robot.shooter.startSpinning();
        /*shooter.enable();
        Timer.delay(5);
        shooter.disable();
        Timer.delay(1);
        for(int i=0;i<1000000;i++) {
        	shooter.startSpinning(.5);
        	shooter.viewReturnedPIDInput();
        	Timer.delay(.01);
        }
        shooter.startSpinning();
        Timer.delay(1);*/
    }
/*//
//    /**
//     * This function is called periodically during operator control
//     */  
    //int i = 0;
    int _loops = 0;
    double targetPositionRotations;
    StringBuilder _sb = new StringBuilder();
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        
//    	double motorOutput = RobotMap.intake.getOutputVoltage() / RobotMap.intake.getBusVoltage();
//    	
//    	/* prepare line to print */
//		_sb.append("\tout:");
//		_sb.append(motorOutput);
//        _sb.append("\tpos:");
//        _sb.append(RobotMap.intake.getPosition() );
//        /* on button1 press enter closed-loop mode on target position */
//        	/* Position mode - button just pressed */
//        targetPositionRotations = 50; /* 50 Rotations in either direction */
//        RobotMap.intake.changeControlMode(TalonControlMode.Position);
//        RobotMap.intake.set(targetPositionRotations); /* 50 rotations in either direction */
//        /* on button2 just straight drive */
////        if(button2) {
////        	/* Percent voltage mode */
////        	RobotMap.intake.changeControlMode(TalonControlMode.PercentVbus);
////        	RobotMap.intake.set(leftYstick);
////        }
//        /* if Talon is in position closed-loop, print some more info */
//        if( RobotMap.intake.getControlMode() == TalonControlMode.Position) {
//        	/* append more signals to print when in speed mode. */
//        	_sb.append("\terrNative:");
//        	_sb.append(RobotMap.intake.getClosedLoopError());
//        	_sb.append("\ttrg:");
//        	_sb.append(targetPositionRotations);
//        }
//        /* print every ten loops, printing too much too fast is generally bad for performance */ 
//        if(++_loops >= 10) {
//        	_loops = 0;
//        	System.out.println(_sb.toString());
//        }
//        _sb.setLength(0);
        /* save button state for on press detect */
        //_lastButton1 = button1;

//        //Robot.arm.runWithXboxController(Robot.oi.getxboxController());
        Robot.chassis.driveWithXboxController(Robot.oi.getxboxController());
//        //Robot.intake.runWithXboxController(Robot.oi.getxboxController());
//        //System.out.println("Intake Encoder Position: " + Robot.intake.getEncoderPosition());
////        Robot.arm.runWithXboxController(Robot.oi.getxboxController());
////        System.out.println("LOWER: " + Robot.arm.getLowerJointEncoderPosition());
////        System.out.println("UPPER: " + Robot.arm.getUpperJointEncoderPosition());
////        
//        //System.out.println(Robot.shooter.getEncoderRate());
////        if(i == 500) {
////        	Robot.chassis.invertMotors();
////        	i++;
////        } else{
////        	i++;
////        	if(i % 100 == 0) {
////        		System.out.println(i);
////        	}
////        }
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
