// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3482.robot.subsystems;

import org.usfirst.frc3482.robot.RobotMap;
import org.usfirst.frc3482.robot.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 *
 */
public class Shooter extends Subsystem{

    // BEGIN AUTOGENERATED CODE, S OURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder shooterEncoder = RobotMap.shootershooterEncoder;
    private final CANTalon shooter = RobotMap.shootershooter;
    public Shooter() {
    	//keep this at 0 for now - mr.Riccardi - NO DO NOT KEEP P AS 0
//    	super("Shooter", .5, 0, 0);
//    	
//    	shooter.setPIDSourceType(PIDSourceType.kRate);
//    	setAbsoluteTolerance(2);
//    	setSetpoint(2000);
//    	//setOutputRange(0.25, 10000);
//    	getPIDController().setContinuous(false); 
//    	LiveWindow.addActuator("Shooter", "PIDSubsystem Controller", getPIDController());
    }
    
    public int getEncoderVelocity() {
    	return shooter.getEncVelocity();
    }
      
    public double getEncoderRate() {
    	return shooterEncoder.getRate();
    }
    
    protected double returnPIDInput() {
    	//System.out.println(shooter.getEncVelocity());
    	//System.out.println("set point: " + getSetpoint());
    	System.out.println("input: " + shooter.getEncVelocity());
    	return shooter.getEncVelocity();
    	//return 2000;
    	//return shooterEncoder.pidGet();
    	
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    public double viewReturnedPIDInput() {
    	return returnPIDInput();
    }
    
    public void enableShooter() {
    	//enable();
    }
    
    public void disableShooter () {
    	//disable();
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void startSpinning() {
    	shooter.set(1.0);
    }
    
    public void startSpinning(double speed) {
    	shooter.set(speed);
    }
    
    public void stopSpinning() {
    	shooter.set(0.0);
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

	//@Override
	//protected void usePIDOutput(double output) {
//		// TODO Auto-generated method stub
//		System.out.println("output: " + output);
//		//shooter.set(0.5);
//		//getPIDController().setSetpoint(shooter.getEncVelocity());
//		shooter.pidWrite(output);
//	}
}

