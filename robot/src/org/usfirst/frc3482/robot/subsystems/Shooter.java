// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3482.robot.subsystems;

import org.usfirst.frc3482.robot.RobotMap;
import org.usfirst.frc3482.robot.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 *
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, S OURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder shooterEncoder = RobotMap.shootershooterEncoder;
    private final CANTalon shooter = RobotMap.shootershooter;
    private final Relay shooterFeed = RobotMap.shooterFeed;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    double targetSpeed = 100.0;
    int loops = 0;
    StringBuilder sb = new StringBuilder();

    public Shooter() {
    	shooter.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
    	shooter.reverseSensor(false);
        //motor.configEncoderCodesPerRev(codesPerRev); //only for quad
        
    	shooter.configNominalOutputVoltage(+0.0f, -0.0f);
    	shooter.configPeakOutputVoltage(+12.0f, -0.0f);
        
    	shooter.setProfile(0);
    	shooter.setF(.0284);
    	shooter.setP(.113333);
        shooter.setI(0);
        shooter.setD(0);
        
        shooter.changeControlMode(TalonControlMode.Speed);
    }
    
    public void setTargetSpeed(double speed) {
    	targetSpeed = speed;
    }
    
    public void startShooterFeed() {
    	shooterFeed.set(Relay.Value.kForward);
    }
    
    public void reverseShooterFeed() {
    	shooterFeed.set(Relay.Value.kReverse);
    }
    
    public void stopShooterFeed() {
    	shooterFeed.set(Relay.Value.kOff);
    }
    
    public void spin() {
    	double motorOutput = shooter.getOutputVoltage()/shooter.getBusVoltage();
    	sb.append("\tout:");
	  	sb.append(motorOutput);
	  	sb.append("\tspd:");
	    sb.append(shooter.getSpeed());
    	shooter.set(targetSpeed);
    	sb.append("\terr:");
        sb.append(shooter.getClosedLoopError());
        sb.append("\ttrg:");
        sb.append(targetSpeed);
    	if(++loops >= 10) {
          	loops = 0;
          	System.out.println(sb.toString());
          }
          sb.setLength(0);
    	//shooter.set(1);
    }
    
    public void stopSpin() {
    	shooter.set(0);
    }
    
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

}

