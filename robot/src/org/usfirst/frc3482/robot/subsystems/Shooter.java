// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3482.robot.subsystems;

import org.usfirst.frc3482.robot.RobotMap;
import org.usfirst.frc3482.robot.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.TalonSRX;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 *
 */
public class Shooter extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder shooterEncoder = RobotMap.shootershooterEncoder;
    private final SpeedController shooter = RobotMap.shootershooter;
    public Shooter() {
    	super("Shooter", 0.5, 0.0, 0.0, 0.5);
    	
    	
    	shooterEncoder.setPIDSourceType(PIDSourceType.kRate);
    	setAbsoluteTolerance(0.1);
    	getPIDController().setContinuous(false); 
    	LiveWindow.addActuator("Shooter", "PIDSubsystem Controller", getPIDController());
    	enableShooter();
    }
    
    public double getEncoderRate() {
    	return shooterEncoder.getRate();
    }
    
    protected double returnPIDInput() {
    	return shooterEncoder.pidGet();
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public void enableShooter() {
    	enable();
    }
    
    public void disableShooter() {
    	disable();
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void startSpinning() {
    	shooter.set(1.0);
    }
    
    public void stopSpinning() {
    	shooter.set(0.0);
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

	@Override
	protected void usePIDOutput(double output) {
		// TODO Auto-generated method stub
		System.out.println("hello" + output);
		//shooter.set(0.5);
		shooter.pidWrite(output);
	}
}

