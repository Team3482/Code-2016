// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3482.robot.subsystems;

import org.usfirst.frc3482.robot.RobotMap;
import org.usfirst.frc3482.robot.commands.*;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder leftEncoder = RobotMap.chassisleftEncoder;
    private final AnalogInput rangeFinder = RobotMap.chassisrangeFinder;
    private final Encoder rightEncoder = RobotMap.chassisrightEncoder;
    private final CANTalon frontLeft = RobotMap.chassisfrontLeft;
    private final CANTalon backLeft = RobotMap.chassisbackLeft;
    private final CANTalon frontRight = RobotMap.chassisfrontRight;
    private final CANTalon backRight = RobotMap.chassisbackRight;
    private final RobotDrive robotDrive41 = RobotMap.chassisRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    boolean dirFrontLeft = false;
    boolean dirRearLeft = false;
    boolean dirFrontRight = false;
    boolean dirRearRight = false;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void invertMotors() {
    	/*backRight.setInverted(!backRight.getInverted());
    	backLeft.setInverted(!backLeft.getInverted());
    	frontRight.setInverted(!frontRight.getInverted());
    	frontLeft.setInverted(!frontLeft.getInverted()); */
    	robotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, !dirFrontLeft);
    	robotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, !dirRearLeft);
    	robotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, !dirFrontRight);
    	robotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, !dirRearRight);
    	dirFrontLeft = !dirFrontLeft;
    	dirRearLeft = !dirRearLeft;
    	dirFrontRight = !dirFrontRight;
    	dirRearRight = !dirRearRight;
    	System.out.println("inverted");
    }
    
    public void driveWithJoystick(Joystick s) {

		double deadZone = .2;
		double xAxis = s.getAxis(Joystick.AxisType.kX);
		double yAxis = s.getAxis(Joystick.AxisType.kY);
		//System.out.println("xaxis: " + xAxis);
		//System.out.println("yaxis: " + yAxis);
		
		// X sensitivity set by slider, Y sensitivity set by knob
		//double slider = SmartDashboard.getNumber("Slider 1");
		 //xAxis *= (slider / 100);
		//double knob = s.getAxis(Joystick.AxisType.kZ);
		//knob = 1 - (knob / 2);    // Format input from Z Axis
		//yAxis *= knob;
		// If the X or Y axes are in the deadzone, flip them to zero.
		if (xAxis < deadZone && xAxis > -deadZone) {
			xAxis = 0;
		}
		if (yAxis < deadZone && yAxis > -deadZone) {
			yAxis = 0;
		}
		robotDrive41.arcadeDrive(yAxis, xAxis);
	}
	//drives the robot with a joystick - xbox configuration
    
	public void driveWithXboxController(Joystick s) {
		double leftY = s.getRawAxis(1);
		double rightX = s.getRawAxis(4);
		//System.out.println("xaxis: " + rightX);
		//System.out.println("yaxis: " + leftY);
		//double twist = s.getTwist();
		//double sensitivity = SmartDashboard.getNumber("Slider 1");
		//sensitivity /= 100;
		double deadZone = 0.1;

		if (leftY < deadZone && leftY > -deadZone) {
			leftY = 0;
		}
		if (rightX < deadZone && rightX > -deadZone) {
			rightX = 0;
		}
		//rightX *= sensitivity;
		robotDrive41.arcadeDrive(leftY, rightX);
	}
	
	
	
	//moves the robot to a location
	public void move(double moveValue, double rotateValue) {
		robotDrive41.arcadeDrive(moveValue, rotateValue);
	}
	//stops the robot

	public void stop() {
		robotDrive41.stopMotor();
	}
	//sets the safety

	public void setSafety(boolean n) {
		robotDrive41.setSafetyEnabled(n);
	}

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

